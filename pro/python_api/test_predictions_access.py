"""
Script de Teste: Verificar Acesso √†s Predi√ß√µes da API-Football

Este script testa:
1. Se seu plano tem acesso ao endpoint /predictions
2. Se consegue acessar predi√ß√µes de partidas agendadas (futuras)
3. Quais dados de predi√ß√£o est√£o dispon√≠veis

Uso:
python test_predictions_access.py --apif-key SUA_KEY
"""
import sys
import os
import argparse
from datetime import datetime, timedelta

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from data.api_football_collector import APIFootballCollector


def test_predictions_access(api_key: str):
    """
    Testa acesso √†s predi√ß√µes da API-Football
    """
    print("="*70)
    print("TESTE DE ACESSO √ÄS PREDI√á√ïES DA API-FOOTBALL")
    print("="*70)
    print()

    collector = APIFootballCollector(api_key)

    # Teste 1: Buscar fixtures agendados (pr√≥ximos dias)
    print("üìã Teste 1: Buscando fixtures agendados...")
    print("-"*70)

    try:
        # Buscar pr√≥ximos 5 jogos do Brasileir√£o
        today = datetime.now()
        next_7_days = today + timedelta(days=7)

        fixtures = collector.get_fixtures(
            league_id=71,  # Brasileir√£o
            season=2024,
            status="NS",  # Not Started (agendados)
        )

        if not fixtures:
            print("‚ö†Ô∏è  Nenhum fixture agendado encontrado no Brasileir√£o")
            print("   Tentando outras ligas...")

            # Tentar Premier League
            fixtures = collector.get_fixtures(
                league_id=39,  # Premier League
                season=2024,
                status="NS"
            )

        if fixtures:
            print(f"‚úÖ Encontrados {len(fixtures)} fixtures agendados\n")

            # Pegar os primeiros 3 fixtures
            test_fixtures = fixtures[:3]

            for i, fixture in enumerate(test_fixtures, 1):
                fixture_id = fixture["fixture"]["id"]
                home_team = fixture["teams"]["home"]["name"]
                away_team = fixture["teams"]["away"]["name"]
                match_date = fixture["fixture"]["date"]

                print(f"[{i}] {home_team} vs {away_team}")
                print(f"    ID: {fixture_id}")
                print(f"    Data: {match_date}")
                print()

            # Teste 2: Tentar acessar predi√ß√µes
            print("\n" + "="*70)
            print("üìä Teste 2: Tentando acessar PREDI√á√ïES...")
            print("="*70)
            print()

            test_fixture = test_fixtures[0]
            fixture_id = test_fixture["fixture"]["id"]
            home_team = test_fixture["teams"]["home"]["name"]
            away_team = test_fixture["teams"]["away"]["name"]

            print(f"Testando predi√ß√µes para: {home_team} vs {away_team}")
            print(f"Fixture ID: {fixture_id}\n")

            # Chamar endpoint de predi√ß√µes
            params = {"fixture": fixture_id}
            data = collector._make_request("predictions", params)

            # Verificar resposta
            errors = data.get("errors")
            response = data.get("response", [])

            if errors:
                print("‚ùå ERRO AO ACESSAR PREDI√á√ïES:")
                print(f"   {errors}")
                print()

                # Verificar tipo de erro
                if isinstance(errors, dict):
                    if errors.get("requests"):
                        print("üí° Tipo de erro: Limite de requisi√ß√µes")
                    elif errors.get("token"):
                        print("üí° Tipo de erro: API key inv√°lida")
                    elif "plan" in str(errors).lower() or "subscription" in str(errors).lower():
                        print("üí° Tipo de erro: Restri√ß√£o de plano")
                        print("   Seu plano n√£o tem acesso ao endpoint /predictions")
                        print()
                        print("   SOLU√á√ïES:")
                        print("   1. Upgrade para plano pago (a partir de $19/m√™s)")
                        print("   2. Usar apenas nossas pr√≥prias predi√ß√µes (Poisson + XGBoost)")
                return False

            elif response:
                print("‚úÖ ACESSO √ÄS PREDI√á√ïES CONFIRMADO!")
                print()

                # Analisar dados da predi√ß√£o
                prediction_data = response[0]

                # Predi√ß√£o principal
                predictions = prediction_data.get("predictions", {})

                print("üìà DADOS DA PREDI√á√ÉO:")
                print("-"*70)

                # Winner
                winner = predictions.get("winner", {})
                if winner:
                    print(f"Vencedor previsto: {winner.get('name')} ({winner.get('comment')})")

                # Percentuais
                percent = predictions.get("percent", {})
                if percent:
                    print(f"\nPercentuais:")
                    print(f"  Casa: {percent.get('home')}")
                    print(f"  Empate: {percent.get('draw')}")
                    print(f"  Fora: {percent.get('away')}")

                # Over/Under
                under_over = predictions.get("under_over")
                if under_over:
                    print(f"\nOver/Under: {under_over}")

                # Goals
                goals = predictions.get("goals", {})
                if goals:
                    print(f"\nGols previstos:")
                    print(f"  Casa: {goals.get('home')}")
                    print(f"  Fora: {goals.get('away')}")

                # Advice
                advice = predictions.get("advice")
                if advice:
                    print(f"\nRecomenda√ß√£o: {advice}")

                # Compara√ß√µes
                comparison = prediction_data.get("comparison", {})
                if comparison:
                    print(f"\nüìä COMPARA√á√ïES:")
                    print("-"*70)
                    print(f"Forma: Casa {comparison.get('form', {}).get('home')} x Fora {comparison.get('form', {}).get('away')}")
                    print(f"Ataque: Casa {comparison.get('att', {}).get('home')} x Fora {comparison.get('att', {}).get('away')}")
                    print(f"Defesa: Casa {comparison.get('def', {}).get('home')} x Fora {comparison.get('def', {}).get('away')}")
                    print(f"Poisson: Casa {comparison.get('poisson_distribution', {}).get('home')} x Fora {comparison.get('poisson_distribution', {}).get('away')}")
                    print(f"H2H: Casa {comparison.get('h2h', {}).get('home')} x Fora {comparison.get('h2h', {}).get('away')}")
                    print(f"TOTAL: Casa {comparison.get('total', {}).get('home')} x Fora {comparison.get('total', {}).get('away')}")

                # Teams data
                teams = prediction_data.get("teams", {})
                if teams:
                    print(f"\nüìä ESTAT√çSTICAS DOS TIMES:")
                    print("-"*70)

                    home = teams.get("home", {})
                    away = teams.get("away", {})

                    if home:
                        print(f"\n{home.get('name')} (Casa):")
                        last_5 = home.get("last_5", {})
                        if last_5:
                            print(f"  √öltimos 5 jogos - Forma: {last_5.get('form')}, Ataque: {last_5.get('att')}, Defesa: {last_5.get('def')}")

                    if away:
                        print(f"\n{away.get('name')} (Fora):")
                        last_5 = away.get("last_5", {})
                        if last_5:
                            print(f"  √öltimos 5 jogos - Forma: {last_5.get('form')}, Ataque: {last_5.get('att')}, Defesa: {last_5.get('def')}")

                print()
                print("="*70)
                print("‚úÖ SEU PLANO TEM ACESSO COMPLETO √ÄS PREDI√á√ïES!")
                print("="*70)
                print()

                return True

            else:
                print("‚ö†Ô∏è  Resposta vazia do endpoint /predictions")
                print("   Pode ser que n√£o haja predi√ß√µes dispon√≠veis para este fixture")
                return None

        else:
            print("‚ö†Ô∏è  Nenhum fixture agendado encontrado para testar")
            return None

    except Exception as e:
        print(f"‚ùå Erro durante o teste: {e}")
        import traceback
        traceback.print_exc()
        return False


def analyze_predictions_usefulness():
    """
    Analisa a utilidade das predi√ß√µes da API-Football
    """
    print("\n" + "="*70)
    print("üí° AN√ÅLISE: UTILIDADE DAS PREDI√á√ïES DA API-FOOTBALL")
    print("="*70)
    print()

    print("ü§î AS PREDI√á√ïES DA API-FOOTBALL S√ÉO √öTEIS?")
    print("-"*70)
    print()

    print("‚úÖ SIM! Aqui est√° como us√°-las estrategicamente:")
    print()

    print("1Ô∏è‚É£  ENSEMBLE COM NOSSOS MODELOS")
    print("   Combinar predi√ß√µes da API com nossas pr√≥prias (Poisson + XGBoost)")
    print("   Exemplo: M√©dia ponderada")
    print("     - Nossa predi√ß√£o: 65% vit√≥ria casa")
    print("     - API-Football: 60% vit√≥ria casa")
    print("     - Ensemble: 62.5% (m√©dia) ou peso maior no nosso modelo")
    print()

    print("2Ô∏è‚É£  FEATURE ENGINEERING")
    print("   Usar dados da API como features ADICIONAIS no XGBoost:")
    print("     - api_home_win_prob")
    print("     - api_draw_prob")
    print("     - api_away_win_prob")
    print("     - api_form_comparison")
    print("     - api_att_comparison")
    print("     - api_def_comparison")
    print("     - api_poisson_home")
    print("   Isso enriquece MUITO o modelo!")
    print()

    print("3Ô∏è‚É£  IDENTIFICAR VALUE BETS")
    print("   Quando NOSSA predi√ß√£o DIFERE significativamente da API:")
    print("   Exemplo:")
    print("     - Nossa predi√ß√£o: 70% vit√≥ria casa")
    print("     - API prediz: 50% vit√≥ria casa")
    print("     - A√á√ÉO: Investigar! Pode ser value bet se acharmos que")
    print("             nossa an√°lise est√° correta")
    print()

    print("4Ô∏è‚É£  VALIDA√á√ÉO CRUZADA")
    print("   Comparar nossas predi√ß√µes com a API:")
    print("     - Se ambas concordam (ex: 65% vs 60%): ‚úÖ Confian√ßa alta")
    print("     - Se discordam muito (ex: 70% vs 40%): ‚ö†Ô∏è Investigar")
    print()

    print("5Ô∏è‚É£  BACKTESTING COMPARATIVO")
    print("   Comparar performance:")
    print("     - Nosso modelo vs API-Football vs Ensemble")
    print("     - Ver qual tem melhor ROI")
    print()

    print("‚ö†Ô∏è  O QUE N√ÉO FAZER:")
    print("-"*70)
    print("‚ùå Usar APENAS as predi√ß√µes da API (ignorar nossos modelos)")
    print("   Por qu√™? Perdemos nosso edge competitivo!")
    print()
    print("‚ùå Confiar cegamente nas predi√ß√µes da API")
    print("   Por qu√™? A API n√£o conhece nuances locais/recentes")
    print()

    print("\n" + "="*70)
    print("üí∞ ESTRAT√âGIA RECOMENDADA:")
    print("="*70)
    print()
    print("1. Coletar predi√ß√µes da API para partidas agendadas")
    print("2. Gerar NOSSAS predi√ß√µes (Poisson + XGBoost)")
    print("3. Comparar ambas:")
    print("   ‚Ä¢ Se concordam (¬±10%): ‚úÖ Apostar com confian√ßa")
    print("   ‚Ä¢ Se discordam muito: ‚ö†Ô∏è Analisar manualmente ou passar")
    print("4. Usar ensemble quando ambas concordam")
    print("5. Treinar modelo com features da API (melhor op√ß√£o!)")
    print()


def main():
    parser = argparse.ArgumentParser(
        description="Testa acesso √†s predi√ß√µes da API-Football"
    )

    parser.add_argument(
        "--apif-key",
        help="API key da API-Football v3"
    )

    args = parser.parse_args()

    # Obter API key
    api_key = args.apif_key or os.getenv("API_FOOTBALL_KEY")

    if not api_key:
        print("‚ùå API key da API-Football n√£o configurada!")
        print("\nOp√ß√µes:")
        print("1. Passe --apif-key SUA_KEY")
        print("2. Configure API_FOOTBALL_KEY no .env")
        sys.exit(1)

    # Executar teste
    has_access = test_predictions_access(api_key)

    # Mostrar an√°lise de utilidade
    analyze_predictions_usefulness()

    # Resumo final
    print("\n" + "="*70)
    print("üìã RESUMO DO TESTE")
    print("="*70)

    if has_access:
        print("‚úÖ Status: ACESSO CONFIRMADO")
        print("‚úÖ Voc√™ pode usar predi√ß√µes da API-Football!")
        print()
        print("üöÄ PR√ìXIMOS PASSOS:")
        print("   1. Criar script de coleta de predi√ß√µes")
        print("   2. Integrar com nossos modelos (ensemble)")
        print("   3. Adicionar features da API ao XGBoost")
        print("   4. Fazer backtesting comparativo")

    elif has_access is False:
        print("‚ùå Status: SEM ACESSO")
        print("‚ö†Ô∏è  Seu plano n√£o inclui o endpoint /predictions")
        print()
        print("üí° OP√á√ïES:")
        print("   1. Upgrade para plano pago (recomendado se precisa deste recurso)")
        print("   2. Usar apenas nossos pr√≥prios modelos")
        print("   3. Focar em melhorar nossos modelos com dados que temos")
        print()
        print("‚ÑπÔ∏è  Nossos modelos (Poisson + XGBoost) j√° s√£o muito bons!")
        print("   As predi√ß√µes da API s√£o um B√îNUS, n√£o essenciais.")

    else:
        print("‚ö†Ô∏è  Status: INDETERMINADO")
        print("   N√£o foi poss√≠vel confirmar acesso (sem fixtures para testar)")

    print("="*70)


if __name__ == "__main__":
    main()
