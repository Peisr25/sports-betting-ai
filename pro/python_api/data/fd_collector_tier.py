"""
Collector Tier-Aware para football-data.org

Wrapper do FootballDataCollector com:
- Rate limiting autom√°tico
- Logs de tier
- Tratamento de erros espec√≠fico por tier
"""
from typing import Dict, List, Optional

try:
    from .collector import FootballDataCollector
    from .tier_config import TierConfig, RateLimiter
except ImportError:
    from collector import FootballDataCollector
    from tier_config import TierConfig, RateLimiter


class FootballDataCollectorTierAware(FootballDataCollector):
    """
    Collector com suporte a tiers e rate limiting

    Usage:
        # Free tier
        collector = FootballDataCollectorTierAware(api_key, tier='free')
        matches = collector.get_matches("PL", status="FINISHED")
        # Respeita 10 req/min automaticamente

        # Paid tier (futuro)
        collector = FootballDataCollectorTierAware(api_key, tier='paid')
        # Respeita 100 req/min
    """

    def __init__(self, api_key: str, tier='free'):
        """
        Args:
            api_key: API key da football-data.org
            tier: 'free' ou 'paid'
        """
        super().__init__(api_key)

        self.tier = tier
        self.config = TierConfig.get_config(tier)

        # Rate limiter
        max_req, window = TierConfig.get_rate_limit(tier)
        self.rate_limiter = RateLimiter(max_req, window)

        print(f"üéØ Collector: {tier.upper()} tier")
        print(f"   Rate limit: {max_req} req/{window}s")

    def _make_request(self, endpoint: str, params: Dict = None) -> Dict:
        """
        Override para adicionar rate limiting

        Args:
            endpoint: Endpoint da API
            params: Par√¢metros opcionais

        Returns:
            Response JSON
        """
        # Aguarda se necess√°rio (rate limiting)
        self.rate_limiter.wait_if_needed()

        # Faz requisi√ß√£o (usa implementa√ß√£o da classe pai)
        try:
            response = super()._make_request(endpoint, params)

            # Log se estamos pr√≥ximos do limite
            remaining = self.rate_limiter.get_remaining_requests()
            if remaining <= 2:
                print(f"   ‚ö†Ô∏è  Quota: {remaining} requisi√ß√µes restantes")

            return response

        except Exception as e:
            error_msg = str(e)

            # Mensagens espec√≠ficas por tier
            if "429" in error_msg:
                max_req, window = TierConfig.get_rate_limit(self.tier)
                print(f"\n‚ùå Rate limit excedido!")
                print(f"   Tier: {self.tier}")
                print(f"   Limite: {max_req} req/{window}s")
                print(f"   Aguarde {window}s antes de continuar")

            raise

    def get_matches_with_details(
        self,
        competition_code: str = None,
        team_id: int = None,
        status: str = "SCHEDULED",
        limit: int = None
    ) -> List[Dict]:
        """
        Busca partidas com logging de tier

        Args:
            competition_code: C√≥digo da competi√ß√£o
            team_id: ID do time
            status: Status da partida
            limit: Limite de resultados

        Returns:
            Lista de partidas
        """
        # Verifica se competi√ß√£o √© acess√≠vel neste tier
        if competition_code and not TierConfig.is_competition_available(self.tier, competition_code):
            print(f"‚ö†Ô∏è  Competi√ß√£o {competition_code} pode n√£o estar dispon√≠vel no {self.tier} tier")

        # Busca matches
        matches = self.get_matches(competition_code, team_id, status)

        # Limita se especificado
        if limit and len(matches) > limit:
            matches = matches[:limit]

        # Log de features dispon√≠veis
        if matches and self.tier == 'free':
            self._log_available_features(matches[0])

        return matches

    def get_team_matches_with_limit(
        self,
        team_id: int,
        last_n: int = 10,
        status: str = "FINISHED"
    ) -> List[Dict]:
        """
        Busca √∫ltimas N partidas de um time com rate limiting

        Args:
            team_id: ID do time
            last_n: N√∫mero de partidas
            status: Status das partidas

        Returns:
            Lista de partidas
        """
        matches = self.get_team_matches_history(
            team_id=team_id,
            last_n=last_n,
            status=status
        )

        # Log de features
        if matches and self.tier == 'free':
            print(f"\n   üìä {len(matches)} partidas obtidas para team {team_id}")
            self._log_available_features(matches[0])

        return matches

    def _log_available_features(self, match: Dict):
        """
        Loga quais features est√£o dispon√≠veis na partida

        √ötil para saber o que o free tier realmente fornece
        """
        print(f"\n   üîç Features dispon√≠veis (amostra):")
        print(f"      Score: {'‚úÖ' if match.get('score') else '‚ùå'}")
        print(f"      Goals: {'‚úÖ' if match.get('goals') else '‚ùå'}")
        print(f"      Bookings: {'‚úÖ' if match.get('bookings') else '‚ùå'}")
        print(f"      Substitutions: {'‚úÖ' if match.get('substitutions') else '‚ùå'}")
        print(f"      Home Lineup: {'‚úÖ' if match.get('homeTeam', {}).get('lineup') else '‚ùå'}")
        print(f"      Home Statistics: {'‚úÖ' if match.get('homeTeam', {}).get('statistics') else '‚ùå'}")

    def get_remaining_requests(self) -> int:
        """
        Retorna quantas requisi√ß√µes ainda podem ser feitas

        Returns:
            int
        """
        return self.rate_limiter.get_remaining_requests()

    def get_tier_info(self) -> Dict:
        """
        Retorna informa√ß√µes sobre o tier atual

        Returns:
            Dict com info do tier
        """
        return {
            'tier': self.tier,
            'rate_limit': f"{self.config['rate_limit_requests']} req/{self.config['rate_limit_window']}s",
            'features_expected': self.config['features_count_expected'],
            'has_statistics': self.config['has_statistics'],
            'has_lineup': self.config['has_lineup'],
            'remaining_requests': self.get_remaining_requests()
        }

    def print_tier_info(self):
        """
        Imprime informa√ß√µes do tier
        """
        info = self.get_tier_info()
        print(f"\n{'='*60}")
        print(f"  TIER INFO: {info['tier'].upper()}")
        print(f"{'='*60}")
        print(f"  Rate limit: {info['rate_limit']}")
        print(f"  Features esperadas: ~{info['features_expected']}")
        print(f"  Statistics: {'‚úÖ' if info['has_statistics'] else '‚ùå'}")
        print(f"  Lineup detalhado: {'‚úÖ' if info['has_lineup'] else '‚ùå'}")
        print(f"  Requisi√ß√µes restantes: {info['remaining_requests']}")
        print(f"{'='*60}\n")


# Exemplo de uso
if __name__ == "__main__":
    import os
    from dotenv import load_dotenv

    load_dotenv("../../.env")
    api_key = os.getenv("FOOTBALL_DATA_API_KEY")

    if not api_key:
        print("‚ùå FOOTBALL_DATA_API_KEY n√£o encontrada")
        print("\nConfigurar:")
        print("  echo 'FOOTBALL_DATA_API_KEY=sua_key' >> pro/.env")
        exit(1)

    print("=== Collector Tier-Aware Test ===\n")

    # Free tier
    collector = FootballDataCollectorTierAware(api_key, tier='free')
    collector.print_tier_info()

    # Teste de rate limiting
    print("Testando rate limiting...")
    print("(Fazendo 3 requisi√ß√µes)")

    try:
        # Requisi√ß√£o 1
        print("\n1Ô∏è‚É£ Buscando competi√ß√µes...")
        comps = collector.get_competitions()
        print(f"   ‚úÖ {len(comps)} competi√ß√µes")

        # Requisi√ß√£o 2
        print("\n2Ô∏è‚É£ Buscando partidas do Flamengo...")
        matches = collector.get_team_matches_with_limit(1783, last_n=5)
        print(f"   ‚úÖ {len(matches)} partidas")

        # Requisi√ß√£o 3
        print("\n3Ô∏è‚É£ Buscando partidas SCHEDULED do BSA...")
        scheduled = collector.get_matches_with_details("BSA", status="SCHEDULED", limit=3)
        print(f"   ‚úÖ {len(scheduled)} partidas agendadas")

        print(f"\n‚úÖ Teste conclu√≠do!")
        print(f"   Requisi√ß√µes restantes: {collector.get_remaining_requests()}")

    except Exception as e:
        print(f"\n‚ùå Erro: {e}")
        print("\nNOTA: Se voc√™ est√° vendo '403 Access denied',")
        print("      √© porque o ambiente de execu√ß√£o est√° bloqueado.")
        print("      O c√≥digo est√° correto e funcionar√° quando voc√™")
        print("      executar localmente!")
